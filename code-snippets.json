{
 "init three scene":{
    "prefix": "three scene",
    "body": "const scene = new THREE.Scene()",
  },
  "init three gui":{
    "prefix": "three gui",
    "body": "const gui = new dat.GUI()",
  },
 "init three lights":{
    "prefix": "three lights",
    "body": [
      "const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);",
      "scene.add(ambientLight);",
      "",
      "const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);",
      "directionalLight.castShadow = true;",
      "directionalLight.shadow.mapSize.set(1024, 1024);",
      "directionalLight.shadow.camera.far = 15;",
      "directionalLight.shadow.camera.left = -7;",
      "directionalLight.shadow.camera.top = 7;",
      "directionalLight.shadow.camera.right = 7;",
      "directionalLight.shadow.camera.bottom = -7;",
      "directionalLight.position.set(5, 5, 5);",
      "scene.add(directionalLight);",
    ],
  },
  "init three sizes":{
    "prefix": "three sizes",
    "body": [
      "const sizes = {",
      "width: window.innerWidth,",
      "height: window.innerHeight,",
      "};",
    ]
  },
  "init three camera":{
    "prefix": "three camera",
    "body": [
      "const camera = new THREE.PerspectiveCamera(",
      "75,",
      "sizes.width / sizes.height,",
      " 0.1,",
      "100",
      ");",
      "camera.position.set(2, 2, 2);",
      "scene.add(camera);",
    ]
  },
  "init three AxesHelper":{
    "prefix": "three AxesHelper",
    "body":[
      "const helper = new THREE.AxesHelper();",
      "scene.add(helper);",
    ]
  },
  "init three Controls":{
    "prefix": "three Controls",
    "body": [
      "const controls = new OrbitControls(camera, canvas.current!);",
      "controls.target.set(0, 0.75, 0);",
      "controls.enableDamping = true;",
    ]
  },
  "init three Renderer":{
    "prefix": "three Renderer",
    "body": [
      "const renderer = new THREE.WebGLRenderer({",
      "canvas: canvas.current!,",
      "});",
      "renderer.shadowMap.enabled = true;",
      "renderer.shadowMap.type = THREE.PCFSoftShadowMap;",
      "renderer.setSize(sizes.width, sizes.height);",
      "renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));",
    ]
  },
  "init three Animate":{
    "prefix": "three Animate",
    "body": [
      "const clock = new THREE.Clock();",
      "let previousTime = 0;",
      "",
      "const tick = () => {",
        "const elapsedTime = clock.getElapsedTime();",
        "const deltaTime = elapsedTime - previousTime;",
        "previousTime = elapsedTime;",
        "",
        "\/\/ Update controls",
        "controls.update();",
        "",
        "\/\/ Render",
        "renderer.render(scene, camera);",
        "",
        "\/\/ Call tick again on the next frame",
        "window.requestAnimationFrame(tick);",
      "};",
        "",
      "tick();",
    ]
  },
  "init three Floor":{
    "prefix": "three Floor",
    "body": [
      "const floor = new THREE.Mesh(",
      "new THREE.PlaneGeometry(10, 10),",
      "new THREE.MeshStandardMaterial({",
      "color: '#444',",
      "metalness: 0,",
      " roughness: 0.5,",
      "})",
      ");",
      "floor.receiveShadow = true;",
      "floor.rotateX(-0.5 * Math.PI);",
      "scene.add(floor);",
    ]
  },
  "init three resizeHandler":{
    "prefix": "three resize handler",
    "body": [
      "const resizeHandler = () => {",  
      "  \/\/ Update sizes",
      "  sizes.width = window.innerWidth;",
      "  sizes.height = window.innerHeight;",
      "",
      "  \/\/ Update camera",
      "  camera.aspect = sizes.width / sizes.height;",
      "  camera.updateProjectionMatrix();",
      "",
      "  \/\/ Update renderer",
      "  renderer.setSize(sizes.width, sizes.height);",
      "  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));",  
      "};",
    ]
  }
}